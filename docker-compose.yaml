version: '3.8'

services:

  orchestrator_db:
    image: postgres:13
    container_name: postgres_odb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: scenarios
    volumes:
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5431:5432"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d scenarios'" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - my-network

  userapi_db:
    image: postgres:13
    container_name: postgres_udb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: scenarios
    volumes:
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d scenarios'" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - my-network

  inference_db:
    image: postgres:13
    container_name: postgres_idb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: scenarios
    volumes:
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d scenarios'" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - my-network

  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka
    networks:
      - my-network
    ports:
      - "9092:9092"   # внешний доступ
      - "9093:9093"   # внутренний порт для связи брокеров
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"

      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER

      KAFKA_LISTENERS: CONTROLLER://kafka:9093,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: CONTROLLER://kafka:9093,EXTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: EXTERNAL

      KAFKA_LOG_DIRS: /tmp/kraft-data
      KAFKA_METADATA_LOG_DIR: /tmp/kraft-meta

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka-init:/opt/kafka/init
    healthcheck:
      test: [ "CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-init:
    image: apache/kafka:4.0.0
    container_name: kafka-init
    networks:
      - my-network
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ "bash", "-c", "
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --topic videos --partitions 3 --replication-factor 1 &&
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --topic runners --partitions 3 --replication-factor 1 &&
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --topic scenario --partitions 1 --replication-factor 1 &&
      /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --topic outbox --partitions 1 --replication-factor 1
    " ]
    restart: "no"

  producer1:
    build:
      context: ./producer
    container_name: producer1
    networks:
      - my-network
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

  producer2:
    build:
      context: ./producer
    container_name: producer2
    networks:
      - my-network
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

  producer3:
    build:
      context: ./producer
    container_name: producer3
    networks:
      - my-network
    depends_on:
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

  orchestrator:
    build:
      context: ./orchestrator
    container_name: orchestrator
    networks:
      - my-network
    depends_on:
      orchestrator_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

  inference:
    build:
      context: ./inference
    container_name: inference
    networks:
      - my-network
    depends_on:
      inference_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      PYTHONUNBUFFERED: 1

  to_orchestrator:
    build:
      context: ./outbox
    container_name: to_orchestrator
    networks:
      - my-network
    depends_on:
      orchestrator_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: scenarios
      DATABASE_HOST: orchestrator_db

  to_inference:
    build:
      context: ./outbox
    container_name: to_inference
    networks:
      - my-network
    depends_on:
      inference_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    environment:
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: scenarios
      DATABASE_HOST: inference_db

  userapi:
    build:
      context: ./userapi
    container_name: userapi
    networks:
      - my-network
    ports:
      - "8080:8080"
    env_file:
      - ./userapi/.env
    depends_on:
      userapi_db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully

networks:
  my-network:
    driver: bridge
